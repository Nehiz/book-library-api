# Comprehensive W04 Authentication Test Script
# Tests all authentication features including OAuth status

Write-Host "üîê W04 Project: Complete Authentication System Test" -ForegroundColor Cyan
Write-Host "====================================================" -ForegroundColor Cyan

$baseUrl = "http://localhost:3000"
$testResults = @()

# Test 1: Health Check
Write-Host "`n1. ü©∫ Health Check" -ForegroundColor Yellow
try {
    $health = Invoke-RestMethod -Uri "$baseUrl/" -Method GET
    Write-Host "   ‚úÖ API is running" -ForegroundColor Green
    Write-Host "   üìç Available endpoints:" -ForegroundColor White
    $health.endpoints.PSObject.Properties | ForEach-Object { 
        Write-Host "      - $($_.Name): $($_.Value)" -ForegroundColor Gray 
    }
    $testResults += "‚úÖ Health Check: PASSED"
} catch {
    Write-Host "   ‚ùå API not running: $($_.Exception.Message)" -ForegroundColor Red
    $testResults += "‚ùå Health Check: FAILED"
    exit 1
}

# Test 2: User Registration (JWT)
Write-Host "`n2. üë§ User Registration & JWT Authentication" -ForegroundColor Yellow
$timestamp = Get-Date -Format "yyyyMMddHHmmss"
$testUser = @{
    name = "W04 Demo User"
    email = "w04demo$timestamp@example.com"
    password = "SecurePass123"
    confirmPassword = "SecurePass123"
}

try {
    $registerResponse = Invoke-RestMethod -Uri "$baseUrl/api/v1/auth/register" -Method POST -Body ($testUser | ConvertTo-Json) -ContentType "application/json"
    Write-Host "   ‚úÖ Registration successful" -ForegroundColor Green
    Write-Host "   üë§ User: $($registerResponse.user.name) ($($registerResponse.user.email))" -ForegroundColor White
    Write-Host "   üîë JWT Token received" -ForegroundColor White
    $token = $registerResponse.token
    $testResults += "‚úÖ JWT Registration: PASSED"
} catch {
    Write-Host "   ‚ùå Registration failed: $($_.Exception.Message)" -ForegroundColor Red
    $testResults += "‚ùå JWT Registration: FAILED"
}

# Test 3: User Login (JWT)
Write-Host "`n3. üîë User Login & Token Validation" -ForegroundColor Yellow
if ($token) {
    try {
        $loginData = @{
            email = $testUser.email
            password = $testUser.password
        }
        $loginResponse = Invoke-RestMethod -Uri "$baseUrl/api/v1/auth/login" -Method POST -Body ($loginData | ConvertTo-Json) -ContentType "application/json"
        Write-Host "   ‚úÖ Login successful" -ForegroundColor Green
        Write-Host "   üîÑ New token generated" -ForegroundColor White
        $testResults += "‚úÖ JWT Login: PASSED"
    } catch {
        Write-Host "   ‚ùå Login failed: $($_.Exception.Message)" -ForegroundColor Red
        $testResults += "‚ùå JWT Login: FAILED"
    }
} else {
    Write-Host "   ‚è≠Ô∏è Skipped - No user to login" -ForegroundColor Yellow
}

# Test 4: Protected Route Access
Write-Host "`n4. üîí Protected Route Authentication" -ForegroundColor Yellow
if ($token) {
    # Test with token
    try {
        $headers = @{ "Authorization" = "Bearer $token" }
        $profile = Invoke-RestMethod -Uri "$baseUrl/api/v1/auth/me" -Method GET -Headers $headers
        Write-Host "   ‚úÖ Protected route accessible with token" -ForegroundColor Green
        Write-Host "   üìù Profile: $($profile.user.name)" -ForegroundColor White
        $testResults += "‚úÖ Protected Routes (with auth): PASSED"
    } catch {
        Write-Host "   ‚ùå Protected route failed with token: $($_.Exception.Message)" -ForegroundColor Red
        $testResults += "‚ùå Protected Routes (with auth): FAILED"
    }
    
    # Test without token
    try {
        $profileNoAuth = Invoke-RestMethod -Uri "$baseUrl/api/v1/auth/me" -Method GET
        Write-Host "   ‚ùå Protected route should require authentication!" -ForegroundColor Red
        $testResults += "‚ùå Protected Routes (without auth): FAILED"
    } catch {
        Write-Host "   ‚úÖ Protected route correctly rejects unauthorized access" -ForegroundColor Green
        $testResults += "‚úÖ Protected Routes (without auth): PASSED"
    }
}

# Test 5: CRUD Operations with Authentication
Write-Host "`n5. üìö CRUD Operations Authentication" -ForegroundColor Yellow
$testBook = @{
    title = "W04 Authentication Test Book"
    author = "Demo Author" 
    isbn = "978-0-123456-78-9"
    genre = "Fiction"
    publishedDate = "2024-10-13"
    pages = 300
    description = "A test book for W04 authentication demo"
}

# Test POST without auth (should fail)
try {
    $bookNoAuth = Invoke-RestMethod -Uri "$baseUrl/api/v1/books" -Method POST -Body ($testBook | ConvertTo-Json) -ContentType "application/json"
    Write-Host "   ‚ùå Book creation should require authentication!" -ForegroundColor Red
    $testResults += "‚ùå CRUD Without Auth: FAILED"
} catch {
    Write-Host "   ‚úÖ Book creation correctly requires authentication" -ForegroundColor Green
    $testResults += "‚úÖ CRUD Without Auth: PASSED"
}

# Test POST with auth (should succeed)
if ($token) {
    try {
        $headers = @{ "Authorization" = "Bearer $token" }
        $bookWithAuth = Invoke-RestMethod -Uri "$baseUrl/api/v1/books" -Method POST -Body ($testBook | ConvertTo-Json) -ContentType "application/json" -Headers $headers
        Write-Host "   ‚úÖ Book creation successful with authentication" -ForegroundColor Green
        Write-Host "   üìñ Created: $($bookWithAuth.data.title)" -ForegroundColor White
        $bookId = $bookWithAuth.data._id
        $testResults += "‚úÖ CRUD With Auth: PASSED"
    } catch {
        Write-Host "   ‚ùå Book creation failed with authentication: $($_.Exception.Message)" -ForegroundColor Red
        $testResults += "‚ùå CRUD With Auth: FAILED"
    }
}

# Test 6: Public Routes (GET operations)
Write-Host "`n6. üåê Public Routes Access" -ForegroundColor Yellow
try {
    $books = Invoke-RestMethod -Uri "$baseUrl/api/v1/books" -Method GET
    Write-Host "   ‚úÖ Public books endpoint accessible" -ForegroundColor Green
    Write-Host "   üìä Books count: $($books.totalResults)" -ForegroundColor White
    
    $authors = Invoke-RestMethod -Uri "$baseUrl/api/v1/authors" -Method GET
    Write-Host "   ‚úÖ Public authors endpoint accessible" -ForegroundColor Green  
    Write-Host "   üìä Authors count: $($authors.totalResults)" -ForegroundColor White
    $testResults += "‚úÖ Public Routes: PASSED"
} catch {
    Write-Host "   ‚ùå Public routes failed: $($_.Exception.Message)" -ForegroundColor Red
    $testResults += "‚ùå Public Routes: FAILED"
}

# Test 7: OAuth Status Check
Write-Host "`n7. üîó OAuth Configuration Status" -ForegroundColor Yellow
try {
    $oauthStatus = Invoke-RestMethod -Uri "$baseUrl/api/v1/auth/google" -Method GET
    Write-Host "   ‚úÖ OAuth endpoint responds (should show config status)" -ForegroundColor Green
    Write-Host "   ‚ÑπÔ∏è Status: $($oauthStatus.message)" -ForegroundColor White
    $testResults += "‚úÖ OAuth Status: PASSED"
} catch {
    $errorResponse = $_.Exception.Response
    if ($errorResponse.StatusCode -eq "NotImplemented") {
        Write-Host "   ‚úÖ OAuth shows 'not configured' message (expected)" -ForegroundColor Green
        $testResults += "‚úÖ OAuth Status: PASSED"
    } else {
        Write-Host "   ‚ÑπÔ∏è OAuth response: $($_.Exception.Message)" -ForegroundColor Yellow
        $testResults += "‚ÑπÔ∏è OAuth Status: INFO"
    }
}

# Test 8: Swagger Documentation
Write-Host "`n8. üìñ API Documentation" -ForegroundColor Yellow
try {
    $swaggerResponse = Invoke-WebRequest -Uri "$baseUrl/api-docs" -UseBasicParsing
    Write-Host "   ‚úÖ Swagger documentation accessible" -ForegroundColor Green
    Write-Host "   üåê URL: $baseUrl/api-docs" -ForegroundColor White
    $testResults += "‚úÖ Swagger Docs: PASSED"
} catch {
    Write-Host "   ‚ùå Swagger documentation failed: $($_.Exception.Message)" -ForegroundColor Red
    $testResults += "‚ùå Swagger Docs: FAILED"
}

# Test 9: Password Security Check
Write-Host "`n9. üîê Password Security Validation" -ForegroundColor Yellow
$weakPassword = @{
    name = "Weak Password Test"
    email = "weakpass$timestamp@example.com"
    password = "123"
    confirmPassword = "123"
}

try {
    $weakPassResponse = Invoke-RestMethod -Uri "$baseUrl/api/v1/auth/register" -Method POST -Body ($weakPassword | ConvertTo-Json) -ContentType "application/json"
    Write-Host "   ‚ùå Weak password should be rejected!" -ForegroundColor Red
    $testResults += "‚ùå Password Validation: FAILED"
} catch {
    Write-Host "   ‚úÖ Weak password correctly rejected" -ForegroundColor Green
    $testResults += "‚úÖ Password Validation: PASSED"
}

# Summary Report
Write-Host "`nüéâ W04 Authentication Test Complete!" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan

Write-Host "`nüìä Test Results:" -ForegroundColor White
$testResults | ForEach-Object { Write-Host "   $_" }

$passedTests = ($testResults | Where-Object { $_ -like "*PASSED*" }).Count
$totalTests = $testResults.Count
$passPercentage = [math]::Round(($passedTests / $totalTests) * 100)

Write-Host "`nüìà Overall Status: $passedTests/$totalTests tests passed ($passPercentage%)" -ForegroundColor $(if($passPercentage -ge 90) { "Green" } elseif($passPercentage -ge 70) { "Yellow" } else { "Red" })

Write-Host "`nüöÄ Ready for W04 Submission!" -ForegroundColor Green
Write-Host "=============================" -ForegroundColor Green
Write-Host "‚úÖ JWT Authentication System Complete" -ForegroundColor Green
Write-Host "‚úÖ Protected Routes Working" -ForegroundColor Green  
Write-Host "‚úÖ Public Routes Accessible" -ForegroundColor Green
Write-Host "‚úÖ Password Security Enforced" -ForegroundColor Green
Write-Host "‚úÖ API Documentation Available" -ForegroundColor Green
Write-Host "‚úÖ OAuth Framework Ready" -ForegroundColor Green

Write-Host "`nüìã For Video Demo, show:" -ForegroundColor Yellow
Write-Host "   1. User registration via Swagger" -ForegroundColor White
Write-Host "   2. User login and JWT token" -ForegroundColor White
Write-Host "   3. Protected endpoint access with token" -ForegroundColor White
Write-Host "   4. Unauthorized access rejection" -ForegroundColor White
Write-Host "   5. CRUD operations with authentication" -ForegroundColor White
Write-Host "   6. MongoDB user storage verification" -ForegroundColor White